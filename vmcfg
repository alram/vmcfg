#!/usr/node/bin/node

/*
 * vmcfg is a light zonecfg(1M) like command
 * which allows to create the json file
 * used by `vmadm create`.
 */

var fs = require('fs');
var readline = require('readline');
var properties = require('/usr/vm/node_modules/props');
var joyent_allowed = properties.joyent_allowed;
var BRAND_OPTIONS = properties.BRAND_OPTIONS;

/*
 * validate and write a set prop
 *  - shell.type: main, add
 *  - shell.context: main, disks, nics, filesystems
 *  - prop: Array[0]: property, Array[1]: value
 *  - zonedef: JSON file
 *  - callback: error
 */
//TODO: case were a set prop is a list (e.g. resolvers). Do an add prop ?

var args = process.argv;
if ((args[2] === '-f' || args[2] === '--file')
    && (typeof args[3] !== 'undefined')) {
  filename = args[3];
} else {
  return console.error('Usage: vmcfg -f <filename>');
}

createJson(filename, function (err) {
  if (err)
    console.error(err);
});


function createJson(filename, callback) {

  zonedefFileLoad(filename, function (err, message, json) {
    if (err) {
      callback(err);
    } else {
      if (message) console.log(message);
      zonedefShell(filename, json, function (err) {
        if (err) {
          callback(err);
        } else {
          callback();
        }
      });
    }
  });

}

/*
 * zonedefFileLoad cb:
 *  - error
 *  - message
 *  - file content
 */
function zonedefFileLoad(filename, callback) {
  fs.stat(filename, function (err, stats) {
    if (err) {
      // File doesn't exist
      callback(null, filename + ' does not exist.\nUse \'set brand\' to begin.');
    } else {
      if (stats.isFile()) {
        callback(null, null, fs.readFileSync(filename));
      } else {
        callback('Error: ' + filename + ' is not a file.');
      }
    }
  });
}

function writeSetPropToJSON(shell, prop, zonedef, callback) {

  if (!prop[1]) {
    return callback('Error: No value specified');
  }

  var field = prop[0].replace(/('|"| )/g, '');
  var value = prop[1].replace(/('|"| )/g, '');


  //zone brand first
  if (typeof zonedef.brand === 'undefined' && field !== 'brand') {
    return callback('Error: You must specify a zone brand first');
  }

  if (field === 'brand') {
    if (typeof BRAND_OPTIONS[value] !== 'undefined') {
      zonedef.brand = value;
    }
    else {
      return callback('Error: ' + value + ' is not a correct brand.');
    }
  }

  // nic, disk and fs properties are added with `add`
  if (field.match(/(nics|disks|filesystems)/g)) {
    return callback('You must use add (disk|net|fs) to setup this property');
  }


  //brand is setup we can accept allowed and required properties
  if (shell.type === 'main' && zonedef.brand !== 'undefined') {

    // Allowed/Required and create-able for this brand ?
    if ((BRAND_OPTIONS[zonedef.brand].allowed_properties.hasOwnProperty(field)
          && BRAND_OPTIONS[zonedef.brand].allowed_properties[field].indexOf('create') !== -1)
      ||(BRAND_OPTIONS[zonedef.brand].required_properties.hasOwnProperty(field)
          && BRAND_OPTIONS[zonedef.brand].required_properties[field].indexOf('create') !== -1)) {

      if (field === 'brand' && !BRAND_OPTIONS.hasOwnProperty(value)) {
        return callback('Error: ' + value + ' is not a correct brand.');
      }

      zonedef[field] = value;

    } else {
      return callback('Error: ' + field + ' is not a valid property.');
    }

  } else if (shell.type === 'add') {

    var prefix = shell.context + '.*.'

    //nothing required, only allowed
    if (!BRAND_OPTIONS[zonedef.brand].allowed_properties.hasOwnProperty(prefix+field)) {
      return callback('Error: ' + field + ' is not a valid property.');
    }

    // add property at length - 1
    var i = zonedef[shell.context].length - 1;
    zonedef[shell.context][i][field] = value;

  }

  callback(null);
};

function zonedefShell(filename, json, callback) {

  var zonedef = {};

  if (json) {
    try {
      zonedef = JSON.parse(json);
    } catch (e) {
      return callback('Error: JSON file seems badly formatted');
    }
  }

  /*
   * shell.type is where we are globaly
   * to know what command are allowed
   * - main: add, commit, info, remove, set, quit
   * - add: cancel, end, info, set
   * shell.context is what we add (disks, nics, filesystems)
   */
  var shell = {
    type: 'main',
    context: 'main'
  };

  var rl = readline.createInterface(process.stdin, process.stdout, completer);

  // function for completion - must be a better way than that
  function completer(line, callback) {

    var completions = [];


    if (line.match(/^set brand=/)){

      for (var brand in BRAND_OPTIONS) {
        completions.push(brand);
      }

      line = line.substr(10);
      var hits = completions.filter(function (c) {
        return !c.indexOf(line);
      });

      return callback(null, [ hits.length ? hits : completions, line ]);


    } else if (typeof zonedef.brand === 'undefined') {

      completions.push('info');
      completions.push('verify');
      completions.push('quit');
      completions.push('commit');
      completions.push('set brand');

    } else if (shell.context === 'main') {

      completions.push('info');
      completions.push('verify');
      completions.push('quit');
      completions.push('commit');
      completions.push('add ');
      completions.push('set ');

      if (line.match(/^set /)) {
        completions = [];
        for (var prop in BRAND_OPTIONS[zonedef.brand].required_properties) {
          completions.push(prop);
        }

        for (var prop in BRAND_OPTIONS[zonedef.brand].allowed_properties){
          if (!prop.match(/(nics|disks|filesystems)/g)) {

             if (prop != 'image_uuid' && prop != 'brand')
               completions.push(prop);
          }
        }

        line = line.substr(4); //substr 'set '
      }

      if (line.match(/^add /)) {
        completions = [];

        completions.push('net');
        if (zonedef.brand === 'kvm') {
          completions.push('disk');
        } else {
          completions.push('fs');
        }

        line = line.substr(4); //substr 'add '

      }

    } else if (shell.type === 'add') {

      completions.push('cancel');
      completions.push('info');
      completions.push('end');
      completions.push('set ');

      if (line.match(/^set /)) {
        completions = [];

        for (var prop in BRAND_OPTIONS[zonedef.brand].allowed_properties) {
          var reg = new RegExp(shell.context + '\.\*\.');
          if (prop.match(reg)) {
            completions.push(prop.substr(shell.context.length + 3));
          }
        }
        line = line.substr(4); //substr 'set '
      }

    }

    var hits = completions.filter(function (c) {
      return !c.indexOf(line);
    });

    return callback(null, [ hits.length ? hits : completions, line ]);
  }
  //end of completer

  var prefix = 'zonedef> ';
  rl.setPrompt(prefix, prefix.length);
  rl.prompt();

  rl.on('line', function (input) {
    var cmd = [];
    cmd[0] = input.trim().split(' ')[0];
    cmd[1] = '';
    for (var i = 1; i < input.trim().split(' ').length; i++) {
      cmd[1] += input.trim().split(' ')[i];
    }

    if (shell.type === 'main') {

      //TODO: Missing zonecfg commands (e.g remove)

      switch (cmd[0]) {

        case 'set':
          var prop = cmd[1].split('=');
          writeSetPropToJSON(shell, prop, zonedef, function (err) {
            if(err) {
              console.error(err);
            }
            rl.prompt();
          });
          break;

        case 'add':
          if (typeof zonedef.brand === 'undefined') {
            console.error('Error: You must specify a zone brand first!');

          } else if(cmd[1] !== 'disk' && cmd[1] !== 'net' && cmd[1] !== 'fs') {
            console.error('Error: ' + cmd[1] + ' is not a valid command.');

          } else {
            shell.type = 'add';
            shell.context = cmd[1];

            if (cmd[1] === 'disk') {
              shell.context = 'disks';
            } else if (cmd[1] === 'net') {
              shell.context = 'nics';
            } else if (cmd[1] === 'fs') {
              shell.context = 'filesystems';
            }


            //Can't add a disk in a zone
            //Can't use fs in a VM
            if (shell.context === 'disks' && zonedef.brand !== 'kvm') {
              shell.type = shell.context = 'main';
              console.error('Error: Adding a disk is only supported on KVM VM. Use add fs instead');
           } else if (shell.context === 'filesystems' && zonedef.brand === 'kvm') {
              shell.type = shell.context = 'main';
              console.error('Error: Filesystem feature is not supported on KVM VM. Use add disk instead')
           } else {
              if (typeof zonedef[shell.context] === 'undefined') {
                zonedef[shell.context] = [];
              }

              zonedef[shell.context].push({});

              var prefix = 'zonedef:' + cmd[1] + '> ';
              rl.setPrompt(prefix, prefix.length);
            }
          }
          rl.prompt();

          break;

        case 'verify':
           // Verify does *not* verify type of prop. Only required_properties
          if (typeof zonedef.brand === 'undefined') {
            console.error('Error: Missing property: brand');
          } else {
            for (var prop in BRAND_OPTIONS[zonedef.brand].required_properties) {
              if (typeof zonedef[prop] === 'undefined') {
                console.error('Error: Missing property: ' + prop);
              }
            }
          }
          rl.prompt();
          break;

        case 'commit':
          fs.writeFile(filename, JSON.stringify(zonedef), 'utf-8', function (err) {
            if(err) {
              console.error('Error: ' + err);
            } else {
              console.log('Succesfully written zone definition file ' + filename + '.')
            }
            rl.prompt();
          });
          break;

        case 'info':
          console.log(zonedef);
          rl.prompt();
          break;

        case 'quit':
          rl.question('Warning, quit does not save. Really quit ? [y/N] ', function (a) {
            if (a === 'y' || a === 'Y') {
              rl.close();
              callback();
            } else {
              rl.prompt();
            }
          });
          break;

        case '':
          rl.prompt();
          break;

        default:
          console.error('Error: unknown command ' + cmd[0] + '.');
          rl.prompt();
          break;
      }

    } else if (shell.type === 'add') {

      switch (cmd[0]) {

        case 'cancel':
          zonedef[shell.context].pop();
          if (zonedef[shell.context].length === 0) {
            delete zonedef[shell.context];
          }

        case 'end':
          var prefix = 'zonedef> ';
          rl.setPrompt(prefix, prefix.length);
          rl.prompt();
          shell.type = 'main';
          shell.context = 'main';
          break;

        case 'info':
          var length = zonedef[shell.context].length;
          console.log(zonedef[shell.context][length-1]);
          rl.prompt();
          break;

        case 'set':
          var prop = cmd[1].split('=');
          writeSetPropToJSON(shell, prop, zonedef, function (err) {
            if(err) {
              console.error(err);
            }
            rl.prompt();
          });
          break;

        case '':
          rl.prompt();
          break;

        default:
          console.error('Error: unknown command ' + cmd[0] + '.');
          rl.prompt();
          break;

      }
    }

  });

}
